name: Build, Push and Deploy to Kubernetes

on:
  push:
    branches: [ develop, main ]
  pull_request:
    branches: [ develop, main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-to-k8s:
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    environment: 
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
      url: ${{ steps.get-url.outputs.url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          # Configurar kubeconfig (ajusta según tu cluster)
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          
          # Verificar conexión
          kubectl cluster-info

      - name: Update image in deployment
        run: |
          export KUBECONFIG=kubeconfig
          
          # Determinar tag de imagen
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            IMAGE_TAG="latest"
          else
            IMAGE_TAG="develop"
          fi
          
          # Actualizar la imagen en el deployment
          kubectl set image deployment/sirha-backend sirha-backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG} -n sirha
          
          # Esperar a que el rollout se complete
          kubectl rollout status deployment/sirha-backend -n sirha --timeout=300s

      - name: Verify deployment
        run: |
          export KUBECONFIG=kubeconfig
          
          # Verificar que los pods estén corriendo
          kubectl get pods -n sirha -l app=sirha-backend
          
          # Verificar que el service esté disponible
          kubectl get service sirha-backend-service -n sirha
          
          # Verificar que el ingress esté configurado
          kubectl get ingress sirha-backend-ingress -n sirha

      - name: Get service URL
        id: get-url
        run: |
          export KUBECONFIG=kubeconfig
          
          # Obtener la URL del servicio
          if kubectl get ingress sirha-backend-ingress -n sirha -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null; then
            HOSTNAME=$(kubectl get ingress sirha-backend-ingress -n sirha -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            echo "url=http://${HOSTNAME}" >> $GITHUB_OUTPUT
          else
            echo "url=http://localhost:8080" >> $GITHUB_OUTPUT
          fi
